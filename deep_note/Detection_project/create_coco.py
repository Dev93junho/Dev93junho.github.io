# -*- coding: utf-8 -*-
"""Untitled20.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PKRUtjOuEcIgPkR61KwzB0s_SgKvuIP6
"""

import os
import cv2
import random
import numpy as np
import json
from image_info import get_image_size

label_alt = {
    'credit2':'credit',
    'credit1':'credit',
    'card':'credit',
}

labels = {}

label_id = 1
for root, dirs, filenames in os.walk('./'):
    for filename in filenames:
        first, last = os.path.splitext(filename)

        if last != '.jpg':
            continue
        
        json_path = os.path.join(root, first + '.json')
        if not os.path.exists(json_path):
            continue
        
        data = json.load(open(json_path, 'r'))
        label_txt = data['shapes'][0]['label']

        if label_txt in label_alt:
            label_txt = label_alt[label_txt]

        if label_txt not in labels:
            labels[label_txt] = label_id
            label_id += 1

print(labels)

coco_images_train = []
coco_images_valid = []
coco_annos_train = []
coco_annos_valid = []


def sort_points(points):
    s = points.sum(axis=1)
    lt = s.argmin()
    rb = s.argmax()
    m = points[:, 1] - points[:, 0]
    lb = m.argmax()
    rt = m.argmin()
    if len({lt, rb, lb, rt}) < 4:
        return None
    return points[(lt, rt, rb, lb), :]

def get_rect(points):
    x1 = int(points[:, 0].min())
    x2 = int(points[:, 0].max())
    y1 = int(points[:, 1].min())
    y2 = int(points[:, 1].max())
    return [x1, y1, x2 - x1, y2 - y1]

image_id = 1
anno_id = 1

images_path = './'

for root, dirs, filenames in os.walk(images_path):
    for filename in filenames:
        first, last = os.path.splitext(filename)

        if last != '.jpg':
            continue
        
        json_path = os.path.join(root, first + '.json')
        if not os.path.exists(json_path):
            continue
        
        jpg_path = os.path.join(root, filename)
        data = json.load(open(json_path, 'r'))
        label_txt = data['shapes'][0]['label']
        if label_txt in label_alt:
            label_txt = label_alt[label_txt]
        label = labels[label_txt]

        size = get_image_size(jpg_path)
        if size is None:
            print('bad file : ', jpg_path)
            continue
        
        coco_image = {
            'id':image_id,
            'width':size[0],
            'height':size[1],
            'file_name':jpg_path.replace(images_path, ''),
        }
        

        coco_annos = []
        for shape in data['shapes']:
            points = shape['points']
            points = np.array(points, dtype=np.float32)
            rect = get_rect(points)
            coco_anno = {
                'id':anno_id,
                'image_id':image_id,
                'category_id':label,
                'bbox':rect,
                'iscrowd':0,
                'area':rect[2] * rect[3],
            }
            anno_id += 1

            coco_annos.append(coco_anno)

        image_id += 1

        if 'train' in root:
            coco_images_train.append(coco_image)
            coco_annos_train.extend(coco_annos)
        else:
            coco_images_valid.append(coco_image)
            coco_annos_valid.extend(coco_annos)


print(len(coco_images_train))
print(len(coco_annos_train))
print(len(coco_images_valid))
print(len(coco_annos_valid))


coco_cat = []
for label_txt, label in labels.items():
    a = {'id':label, 'name':label_txt}
    coco_cat.append(a)

coco_train = {
    'images':coco_images_train,
    'annotations':coco_annos_train,
    'categories':coco_cat
}

coco_valid = {
    'images':coco_images_valid,
    'annotations':coco_annos_valid,
    'categories':coco_cat
}

json.dump(coco_train, open('cards_coco_train.json', 'w'))
json.dump(coco_valid, open('cards_coco_val.json', 'w'))